"""
THIS SCRIPT SHOWCASES THE THOUGHTS GENERATED BY THE BRAIN AS STATEMENTS COME IN.
THERE ARE 8 TYPES OF THOUGHTS:
1. CARDINALITY CONFLICT: ONLY ONE OBJECT IS ALLOWED FOR THIS PREDICATE, BUT TWO OR MORE HAVE BEEN FOUND
2. NEGATION CONFLICT: A PREVIOUS STATEMENT DIRECTLY NEGATES THIS ONE
3. STATEMENT NOVELTY: AWARENESS FOR STATEMENTS THAT WERE KNOWN ALREADY
4: ENTITY NOVELTY: AWARENESS FOR SUBJECTS OR OBJECTS THAT WERE KNOWN ALREADY
5. SUBJECT GAPS: LEARNING OPPORTUNITIES AROUND PEOPLE AS SUBJECTS OF THE STATEMENT
6. OBJECT GAPS: LEARNING OPPORTUNITIES AROUND OBJECTS OF THE STATEMENT
7. OVERLAP: SHARED INFORMATION WITH EXISTING KNOWLEDGE IN THE BRAIN
8. TRUST: PROXY FOR CONFIDENCE IN THE SOURCE OF THE INFORMATION
"""
import argparse
from pathlib import Path
from tempfile import TemporaryDirectory

from tqdm import tqdm

from cltl.brain.long_term_memory import LongTermMemory
from cltl.brain.utils.base_cases import statements, conflicting_statements


def main(log_path):
    # Create brain connection
    brain = LongTermMemory(address="http://localhost:7200/repositories/sandbox",
                           log_dir=log_path,
                           clear_all=False)

    capsules = statements + conflicting_statements
    for capsule in tqdm(capsules):
        # Add information to the brain
        response = brain.update(capsule, reason_types=True, create_label=True)
        print(f"\n\n---------------------------------------------------------------\n{capsule['triple']}\n")

        # Show different thoughts
        thoughts = response['thoughts']

        # Correctness thoughts
        print(f'\tcardinality conflicts: {thoughts.complement_conflicts()}')
        print(f'\tnegation conflicts: {thoughts.negation_conflicts()}')

        # Completeness thoughts
        print(f'\tsubject gaps on {capsule["subject"]["label"]}: {thoughts.subject_gaps()}')
        print(f'\tobject gaps on {capsule["object"]["label"]}: {thoughts.complement_gaps()}')

        # Engagement
        print(f'\tstatement novelty: {thoughts.statement_novelties()}')
        print(f'\tentity novelty: {thoughts.entity_novelty()}')
        print(f'\toverlaps: {thoughts.overlaps()}')

        # Social
        print(f'\ttrust on {capsule["author"]}: {thoughts.trust()}\n')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Carl-Leolani scenario')
    parser.add_argument('--logs', type=str,
                        help="Directory to store the brain log files. Must be specified to persist the log files.")
    args, _ = parser.parse_known_args()

    if args.logs:
        main(Path(args.logs))
    else:
        with TemporaryDirectory(prefix="brain-log") as log_path:
            main(Path(log_path))
